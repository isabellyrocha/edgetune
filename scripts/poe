#!/bin/bash

POEUSER="iiun"
POESWITCH="poe-1.cluster.iiun.unine.ch"
POEPASSWD="jiph7s2YU86aBfxk4T9cYZL4UVnBzVJYm2w4x57S9ixUzWeAGy"

poe-read()
{
expect << END
log_user 0
spawn ssh $POEUSER@$POESWITCH
expect "password: "
send "$POEPASSWD\r"
expect "Welcome"
expect "# "
send "telnet localhost\r"
expect "(UBNT) >"
send -- "enable\r"
expect "(UBNT) #"
log_user 1
send -- "show poe status $1\r"
send -- " "
expect "(UBNT) #"
log_user 0
send -- "exit\r"
END
}

poe-set()
{
expect << END
log_user 0
spawn ssh $POEUSER@$POESWITCH
expect "password: "
send "$POEPASSWD\r"
expect "Welcome"
expect "# "
send "telnet localhost\r"
expect "(UBNT) >"
send -- "enable\r"
expect "(UBNT) #"
send -- "config\r"
expect "(UBNT) "
send -- "interface $1\r"
expect "(UBNT) "
send -- "poe opmode $2 \r"
expect "(UBNT) "
send -- "exit\r"
send -- "exit\r"
send -- "exit\r"
send -- "exit\r"
END
}
poe-filter()
{
    poe-read "$1" | grep 0/ | grep -v "status" | cut -d/ -f2 | sed 's/Open Circuit/OpenCircuit/' | tr -d "\r"
}
poe-json()
{
    awk 'BEGIN { print "\"poe\": [" } \
        { print "    { \"interface\": "$1", \"detection\": \""$2\
        "\", \"class\": \""$3"\", \"consumed\": "$4\
        ", \"voltage\": "$5", \"current\": "$6\
        ", \"temperature\": "$7" }"} \
        END { print "]" }'
}
poe-csv()
{
    awk '{ print $1","$2","$3","$4","$5","$6","$7 }'
}
usage()
{
    echo "usage:"
    echo "  $0 [-j|-c|-u|-d] [-p port]"
    echo "     -c        List status in CSV format (default)"
    echo "     -j        List status in JSON format"
    echo "     -u        Turns on (up) port (needs -p)"
    echo "     -d        Turns off (down) port (needs -p)"
    echo "     -p port   Selects port to operate"
    exit 0
}
error()
{
    echo "$1"
    exit 1
}
OPC=csv
PORT=""
while test $# -gt 0; do
    case "$1" in
    -j)
        OPC=json
        ;;
    -c)
        OPC=csv
        ;;
    -u)
        OPC=up
        ;;
    -d)
        OPC=down
        ;;
    -p)
        PORT="$2"
        shift
        ;;
    *)
        usage
        ;;
    esac
    shift
done
if test "a$PORT" = a; then
    if test "a$OPC" = aup -o "a$OPC" = adown; then
        error "options -s and -r must use -p <port>"
    else
        PORT=all
    fi
else
    PORT="0/$PORT"
fi
case "$OPC" in
json)
    poe-filter "$PORT" | poe-json
    ;;
csv)
    poe-filter "$PORT" | poe-csv
    ;;
up)
    poe-set "$PORT" auto
    ;;
down)
    poe-set "$PORT" shutdown
    ;;
esac

